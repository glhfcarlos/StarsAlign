//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/inputSystem/PlayerControlsOne.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControlsOne: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControlsOne()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlsOne"",
    ""maps"": [
        {
            ""name"": ""GamePlayerOne"",
            ""id"": ""74a09d83-0417-4152-89bc-748d277468bd"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""d6fa3026-496d-4ab6-a6bb-f08e885f588e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""9358ef2b-7e7d-4979-b3ea-c70d50a9b56e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""8724e8a8-cf2b-4e07-865a-66f7cba90148"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""20998dd6-8359-482a-a883-f25f5a77c01d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d55f2b90-d45b-43af-87fd-86b060369c4e"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d34450db-161d-40cd-bf76-fcd3a51c177b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f158dc4-1c8d-4271-a3db-c0dbfb93c8b7"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""166c1916-75a0-49ab-91ec-796a7409ba44"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab109427-4065-4627-b8da-36f687178bfa"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a5c9898-3638-41a6-940a-0f64dec5f87d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a0e7d4a-114b-4b80-9069-4398a1f8a20f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec4890bf-e98d-4dca-9a5a-9ea488224918"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlayerOne
        m_GamePlayerOne = asset.FindActionMap("GamePlayerOne", throwIfNotFound: true);
        m_GamePlayerOne_Up = m_GamePlayerOne.FindAction("Up", throwIfNotFound: true);
        m_GamePlayerOne_Down = m_GamePlayerOne.FindAction("Down", throwIfNotFound: true);
        m_GamePlayerOne_Left = m_GamePlayerOne.FindAction("Left", throwIfNotFound: true);
        m_GamePlayerOne_Right = m_GamePlayerOne.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlayerOne
    private readonly InputActionMap m_GamePlayerOne;
    private List<IGamePlayerOneActions> m_GamePlayerOneActionsCallbackInterfaces = new List<IGamePlayerOneActions>();
    private readonly InputAction m_GamePlayerOne_Up;
    private readonly InputAction m_GamePlayerOne_Down;
    private readonly InputAction m_GamePlayerOne_Left;
    private readonly InputAction m_GamePlayerOne_Right;
    public struct GamePlayerOneActions
    {
        private @PlayerControlsOne m_Wrapper;
        public GamePlayerOneActions(@PlayerControlsOne wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_GamePlayerOne_Up;
        public InputAction @Down => m_Wrapper.m_GamePlayerOne_Down;
        public InputAction @Left => m_Wrapper.m_GamePlayerOne_Left;
        public InputAction @Right => m_Wrapper.m_GamePlayerOne_Right;
        public InputActionMap Get() { return m_Wrapper.m_GamePlayerOne; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayerOneActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlayerOneActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayerOneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayerOneActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
        }

        private void UnregisterCallbacks(IGamePlayerOneActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
        }

        public void RemoveCallbacks(IGamePlayerOneActions instance)
        {
            if (m_Wrapper.m_GamePlayerOneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlayerOneActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayerOneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayerOneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlayerOneActions @GamePlayerOne => new GamePlayerOneActions(this);
    public interface IGamePlayerOneActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
